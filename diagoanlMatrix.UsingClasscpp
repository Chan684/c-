#include<iostream>
using namespace std;
class diagonal{ 
private:

    int n;
    int *A;

public: 
 diagonal()
 {
   int n=2;
   A=new int[2];
}
diagonal(int n){
    this-> n=n;
    A=new int[n];
}
~diagonal(){
    delete []A;
}
void set(int *m,int i,int j,int x);
void get(int m,int i,int j);
void display();
void getDimension(){ return 0;};

void diagonal::set(int i,int j,int x){
    if(i==j){
        A[i-1]=x;
    }
}
void diagonal::get(int i,int j){
    if(i==j){
        return A[i-1];
    else 
        return 0;
    }
}
void diagonal::display(){
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(i==j){
                return A[i-1];
            }
            else
                return 0;
        }
    }
}
};
int main(){
    int d;
    cout<<"enter the dimensions"<<endl;
    cin>>d;
    diagonal dm(d)
    int x;
    cout<<"Enter all elements"<<endl;
    for(int i=1;i<d;i++){
        for(int j=1;j<d;j++){
            cin>>x;
            dm.set(i,j,x);
        }
    }
    dm.display();
}
